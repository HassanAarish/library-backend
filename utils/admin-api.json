{
  "openapi": "3.0.3",
  "info": {
    "title": "Book store - OpenAPI 3.0",
    "description": "This is a sample Book Store Server based on the OpenAPI 3.0 specification.  You can find out more about\nSwagger at [https://swagger.io](https://swagger.io).",
    "termsOfService": "http://swagger.io/terms/",
    "contact": {
      "email": "apiteam@swagger.io"
    },
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    },
    "version": "1.0.11"
  },
  "externalDocs": {
    "description": "Find out more about Swagger",
    "url": "http://swagger.io"
  },
  "servers": [
    {
      "url": "https://localhost:5000/admin"
    }
  ],
  "components": {
    "securitySchemes": {
      "Authorization": {
        "scheme": "bearer",
        "type": "http"
      }
    },
    "schemas": {
      "Book": {
        "type": "object",
        "required": [
          "Authorization[]",
          "title",
          "category",
          "author",
          "price",
          "isRented"
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "The auto-generated id of the book"
          },
          "title": {
            "type": "string",
            "description": "The title of your book"
          },
          "category": {
            "type": "string",
            "description": "The title of your book default is Anonymous"
          },
          "author": {
            "type": "string",
            "description": "The book author default is Anonymous"
          },
          "price": {
            "type": "number",
            "description": "The price of the book default is zero"
          },
          "isRented": {
            "type": "boolean",
            "description": "Whether the book is rented or not default is false"
          }
        },
        "example": {
          "id": "d5fE_asz",
          "title": "The New Turing Omnibus",
          "category": "Anonymous",
          "author": "Anonymous",
          "price": 10,
          "isRented": false
        }
      },
      "Order": {
        "type": "object",
        "properties": {
          "orderId": {
            "type": "string",
            "description": "The unique identifier for the order"
          },
          "userId": {
            "type": "string",
            "description": "The ID of the user who placed the order"
          },
          "items": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "itemId": {
                  "type": "string",
                  "description": "The ID of the item"
                },
                "quantity": {
                  "type": "integer",
                  "description": "The quantity of the item ordered"
                }
              }
            },
            "description": "The list of items in the order"
          },
          "totalAmount": {
            "type": "number",
            "description": "The total amount of the order"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "The date and time when the order was created"
          }
        },
        "example": {
          "orderId": "abc123",
          "userId": "user123",
          "items": [
            {
              "itemId": "item1",
              "quantity": 2
            },
            {
              "itemId": "item2",
              "quantity": 1
            }
          ],
          "totalAmount": 25.5,
          "createdAt": "2024-06-27T12:00:00Z"
        }
      },
      "User": {
        "type": "object",
        "properties": {
          "username": {
            "type": "string",
            "description": "The username of the user"
          },
          "password": {
            "type": "string",
            "description": "The password of the user"
          },
          "email": {
            "type": "string",
            "format": "email",
            "description": "The email address of the user"
          }
        },
        "example": {
          "username": "john_doe",
          "password": "password123",
          "email": "john.doe@example.com"
        }
      },
      "AdminUser": {
        "type": "object",
        "properties": {
          "username": {
            "type": "string",
            "description": "The username of the admin user"
          },
          "password": {
            "type": "string",
            "description": "The password of the admin user"
          },
          "role": {
            "type": "string",
            "description": "The role of the admin user"
          }
        },
        "example": {
          "username": "admin",
          "password": "admin123",
          "role": "superuser"
        }
      }
    }
  },
  "tags": [
    {
      "name": "Admin book route",
      "description": "API endpoints for managing books via admin(CRUD operations)"
    }
  ],
  "paths": {
    "/add-new-book": {
      "post": {
        "summary": "Create a new book",
        "tags": ["Books"],
        "security": [
          {
            "Authorization": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Book"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The created book",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Book"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized, user not authenticated"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/all-users": {
      "get": {
        "summary": "Get all user profiles (admin only)",
        "tags": ["Books"],
        "security": [
          {
            "Authorization": []
          }
        ],
        "responses": {
          "200": {
            "description": "A list of user profiles",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Book"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized, user not authenticated or not an admin"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/delete-all": {
      "post": {
        "summary": "Delete all books in the database",
        "tags": ["Books"],
        "security": [
          {
            "Authorization": []
          }
        ],
        "responses": {
          "200": {
            "description": "All books deleted successfully"
          },
          "401": {
            "description": "Unauthorized, user not authenticated"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/admin-signup": {
      "post": {
        "summary": "Admin signup",
        "tags": ["Books"],
        "security": [
          {
            "Authorization": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Book"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Admin user signed up successfully"
          },
          "401": {
            "description": "Unauthorized, user not authenticated or not an admin"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/{id}": {
      "put": {
        "summary": "Update a book by ID",
        "tags": ["Books"],
        "security": [
          {
            "Authorization": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "The ID of the book to update"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Book"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The book updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Book"
                }
              }
            }
          },
          "404": {
            "description": "Book not found"
          },
          "500": {
            "description": "Server error"
          }
        }
      },
      "delete": {
        "summary": "Delete a book by ID",
        "tags": ["Books"],
        "security": [
          {
            "Authorization": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "The ID of the book to delete"
          }
        ],
        "responses": {
          "200": {
            "description": "Book deleted successfully"
          },
          "404": {
            "description": "Book not found"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    }
  }
}
